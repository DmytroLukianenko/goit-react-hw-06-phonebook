{"version":3,"sources":["redux/Actions/contactAction.js","redux/constants/contactConstants.js","redux/reducers/contactReducer.js","redux/reducers/index.js","redux/store.js","components/phoneForm/PhoneForm.js","components/Filter/Filter.js","components/singleContact/SingleContact.js","components/ContactList/ContactList.js","components/App/App.js","index.js"],"names":["addContact","createAction","name","number","payload","id","uuidv4","deleteContact","contactStorage","handleFilter","target","value","items","createReducer","state","filter","contact","combineReducers","store","configureStore","reducer","contacts","rootReducer","devTools","process","PhoneForm","formInitialState","alert","inputHandler","setState","submitHandler","e","preventDefault","props","find","toggleAlert","reset","status","this","CSSTransition","in","classNames","timeout","unmountOnExit","onEntered","onClick","className","onSubmit","type","placeholder","onChange","Component","mapDispatchToProps","connect","ownProps","dispatch","normalizedFilter","toLowerCase","includes","TransitionGroup","component","map","key","App","animation","savedContacts","localStorage","getItem","JSON","parse","prevProps","setItem","stringify","appear","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0956d93e.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {\r\n    ADD_CONTACT,\r\n    DELETE_CONTACT,\r\n    CONTACT_STORAGE,\r\n    CONTACT_FILTER,\r\n} from '../constants/contactConstants';\r\n\r\nexport const addContact = createAction(ADD_CONTACT, (name, number) => ({\r\n    payload: {\r\n        id: uuidv4(),\r\n        name,\r\n        number\r\n    }\r\n}))\r\n\r\nexport const deleteContact = createAction(DELETE_CONTACT);\r\nexport const contactStorage = createAction(CONTACT_STORAGE);\r\nexport const handleFilter = createAction(CONTACT_FILTER, ({ target }) => ({\r\n    payload: target.value,\r\n}));\r\n\r\n// export const addContact = (name, number) => ({\r\n//   type: ADD_CONTACT,\r\n//   payload: {\r\n//   id: uuidv4(),\r\n//   name,\r\n//   number,\r\n// },\r\n// });\r\n\r\n// export const deleteContact = (id) => ({\r\n//   type: DELETE_CONTACT,\r\n//   payload: id,\r\n// });\r\n\r\n// export const contactStorage = (arr) => ({\r\n//   type: CONTAT_STORAGE,\r\n//   payload: arr,\r\n// });\r\n\r\n// export const handleFilter = (e) => ({\r\n//   type: QUERY_FILTER,\r\n//   payload: e.target.value,\r\n// });","export const ADD_CONTACT = '@contacts/add';\r\nexport const DELETE_CONTACT = '@contact/delete';\r\nexport const CONTACT_STORAGE = '@contact/storage';\r\nexport const CONTACT_FILTER = '@contact/filter';","import { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n    addContact,\r\n    deleteContact,\r\n    contactStorage,\r\n    handleFilter,\r\n} from '../Actions/contactAction';\r\n\r\nconst removeContact = (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload)\r\n\r\nexport const items = createReducer([], {\r\n    [addContact]: (state, { payload }) => [...state, payload],\r\n    [deleteContact]: removeContact,\r\n    [contactStorage]: (state, { payload }) => payload\r\n\r\n})\r\n\r\nexport const filter = createReducer('', {\r\n    [handleFilter]: (state, { payload }) => (state = payload)\r\n})\r\n\r\n","import { combineReducers } from 'redux';\r\nimport { items, filter } from './contactReducer';\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n});","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst store = configureStore({\r\n    reducer: { contacts: rootReducer },\r\n    devTools: process.env.NODE_ENV !== 'production'\r\n})\r\n\r\nexport default store\r\n\r\n// -----------------------------------\r\n\r\n// import { createStore } from \"redux\";\r\n// import { combineReducers } from \"redux\";\r\n// import { composeWithDevTools } from \"redux-devtools-extension\";\r\n// import contactsReducer from \"./reducers\";\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReducer,\r\n// });\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\n// export default store;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport PropTypes from 'prop-types';\r\nimport { addContact } from '../../redux/Actions/contactAction';\r\nimport './PhonePhorm.css';\r\n\r\nclass PhoneForm extends Component {\r\n    formInitialState = {\r\n        name: '',\r\n        number: '',\r\n    };\r\n    state = {\r\n        ...this.formInitialState,\r\n        alert: false,\r\n    };\r\n\r\n    inputHandler = ({ target }) => {\r\n        const { value, name } = target;\r\n\r\n        this.setState({\r\n            [name]: value,\r\n        });\r\n    };\r\n\r\n    submitHandler = e => {\r\n        const { name, number, alert } = this.state;\r\n        e.preventDefault();\r\n\r\n        const { contacts } = this.props;\r\n        const isExists = contacts.find(contact => contact.name === name);\r\n\r\n        if (isExists) {\r\n            this.toggleAlert(alert);\r\n            return this.reset();\r\n        }\r\n\r\n        this.props.addContact(name, number);\r\n        this.reset();\r\n    };\r\n\r\n    reset = () => {\r\n        this.setState({ ...this.formInitialState });\r\n    };\r\n\r\n    toggleAlert = status => {\r\n        this.setState({ alert: !status });\r\n    };\r\n\r\n    render() {\r\n        const { name, number, alert } = this.state;\r\n        const alertDelay = () => this.setState({ alert: !alert });\r\n\r\n        return (\r\n            <>\r\n                <CSSTransition\r\n                    in={alert}\r\n                    classNames=\"alert\"\r\n                    timeout={1500}\r\n                    unmountOnExit\r\n                    onEntered={alertDelay}\r\n                >\r\n                    <button\r\n                        onClick={this.toggleAlert}\r\n                        className=\"alert\"\r\n                    >{`Contact already exists!`}</button>\r\n                </CSSTransition>\r\n                <form className=\"contacts_form\" onSubmit={this.submitHandler}>\r\n                    <label className=\"input_name\">\r\n                        Name\r\n            <br></br>\r\n                        <input\r\n                            className=\"input_form\"\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            placeholder=\"Add name\"\r\n                            value={name}\r\n                            onChange={this.inputHandler}\r\n                        />\r\n                    </label>\r\n                    <br></br>\r\n                    <label className=\"input_name\">\r\n                        Number\r\n            <br></br>\r\n                        <input\r\n                            className=\"input_form\"\r\n                            type=\"text\"\r\n                            name=\"number\"\r\n                            placeholder=\"Add phone number\"\r\n                            value={number}\r\n                            onChange={this.inputHandler}\r\n                        />\r\n                    </label>\r\n                    <br></br>\r\n                    <button type=\"submit\" className=\"submitBtn\">\r\n                        Create contact\r\n          </button>\r\n                </form>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    contacts: state.contacts.items,\r\n    filter: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    addContact,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PhoneForm);\r\n\r\nPhoneForm.propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            name: PropTypes.string,\r\n            id: PropTypes.string,\r\n            number: PropTypes.string,\r\n        }),\r\n    ).isRequired,\r\n    filter: PropTypes.string.isRequired,\r\n    addContact: PropTypes.func.isRequired,\r\n};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { handleFilter } from '../../redux/Actions/contactAction';\r\nimport './Filter.css';\r\n\r\nconst Filter = ({ filter, handleFilter }) => {\r\n    return (\r\n        <div className='filter_box'>\r\n            <label className='input_label'>\r\n                Find contact you need\r\n                 <br></br>\r\n                <input\r\n                    className='filter_form'\r\n                    type='text'\r\n                    name='filter'\r\n                    placeholder='Enter contact name'\r\n                    value={filter}\r\n                    onChange={handleFilter}\r\n                />\r\n            </label>\r\n        </div >\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    filter: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    handleFilter,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n\r\nFilter.propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            name: PropTypes.string,\r\n            id: PropTypes.string,\r\n            number: PropTypes.string,\r\n        }).isRequired,\r\n    ),\r\n    filter: PropTypes.string.isRequired,\r\n    handleFilter: PropTypes.func.isRequired,\r\n};","import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types'\r\nimport { deleteContact } from '../../redux/Actions/contactAction';\r\nimport './SingleContact.css';\r\n\r\nconst SingleContact = ({ name, number, deleteContact }) => {\r\n    return (\r\n        <li className=\"contact\">\r\n            <h4>{name}</h4>\r\n            <p>{number}</p>\r\n            <button className=\"deleteButton\" type=\"button\" onClick={deleteContact}>\r\n                X\r\n            </button>\r\n        </li>\r\n    );\r\n};\r\nconst mapStateToProps = (state, ownProps) => {\r\n    const contact = state.contacts.items.find(\r\n        contact => contact.id === ownProps.id,\r\n    );\r\n    return { ...contact };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n    deleteContact: () => dispatch(deleteContact(ownProps.id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleContact);\r\n\r\nSingleContact.propTypes = {\r\n    name: PropTypes.string,\r\n    id: PropTypes.string.isRequired,\r\n    number: PropTypes.string,\r\n    deleteContact: PropTypes.func.isRequired,\r\n};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\nimport SingleContact from '../singleContact/SingleContact';\r\nimport './ContactList.css';\r\n\r\nconst ContactList = ({ contacts }) => {\r\n    return (\r\n        <TransitionGroup component='ul' className='contact_List'>\r\n            {contacts.map(({ id }) => (\r\n                <CSSTransition key={id} classNames='list_item' timeout={250}>\r\n                    <SingleContact id={id} />\r\n                </CSSTransition>\r\n            ))}\r\n        </TransitionGroup>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    const { items, filter } = state.contacts;\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n\r\n    const getFilteredContact = items.filter(contact =>\r\n        contact.name.toLowerCase().includes(normalizedFilter),\r\n    )\r\n    return {\r\n        contacts: getFilteredContact\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps)(ContactList)\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            name: PropTypes.string,\r\n            id: PropTypes.string,\r\n            number: PropTypes.string,\r\n        }),\r\n    ).isRequired,\r\n};","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport PhoneForm from '../phoneForm/PhoneForm';\r\nimport Filter from '../Filter/Filter';\r\nimport { contactStorage } from '../../redux/Actions/contactAction';\r\nimport ContactList from '../ContactList/ContactList';\r\n\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n    state = {\r\n        animation: false,\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.setState(state => ({\r\n            animation: !state.animation,\r\n        }));\r\n\r\n        const savedContacts = localStorage.getItem('contacts');\r\n        if (savedContacts) {\r\n            this.props.contactStorage(JSON.parse(savedContacts));\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const { contacts } = this.props;\r\n        if (prevProps.contacts !== contacts) {\r\n            localStorage.setItem('contacts', JSON.stringify(contacts));\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <CSSTransition\r\n                    in={true}\r\n                    appear={true}\r\n                    classNames=\"title-slideIn\"\r\n                    timeout={500}\r\n                    unmountOnExit\r\n                >\r\n                    <h1 className=\"app_title\">Phonebook</h1>\r\n                </CSSTransition>\r\n\r\n                <PhoneForm />\r\n\r\n                {this.props.contacts.length === 0 && (\r\n                    <>\r\n                        <h2 className=\"contact_title\">Contacts</h2>\r\n                        <p>Contacts list is empty. Please, create new cotnact!</p>\r\n                    </>\r\n                )}\r\n\r\n                <CSSTransition\r\n                    in={this.props.contacts.length > 1}\r\n                    classNames=\"filter_animation\"\r\n                    timeout={250}\r\n                    unmountOnExit\r\n                >\r\n                    <Filter />\r\n                </CSSTransition>\r\n\r\n                <ContactList />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    contacts: state.contacts.items,\r\n});\r\nconst mapDispatchToProps = {\r\n    contactStorage,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\nimport \"./index.css\";\r\nimport App from \"./components/App/App\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider >,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}